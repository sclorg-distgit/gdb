From FEDORA_PATCHES Mon Sep 17 00:00:00 2001
From: Keith Seitz <keiths@redhat.com>
Date: Tue, 9 Jul 2019 13:51:39 -0700
Subject: gdb-rhbz1713762-fortran-nameless-modules.patch

;; Fix segfault with nameless fortran modules.
;; Bernhard Heckel, RH BZ 1713762

    Dwarf: Don't add nameless modules to partial symbol table

    A name for BLOCK DATA in Fortran is optional.  If no name has been
    assigned, GDB crashes during read-in of DWARF when BLOCK DATA is
    represented via DW_TAG_module.  BLOCK DATA is used for one-time
    initialization of non-pointer variables in named common blocks.

    As of now there is no issue when gfortran is used as DW_TAG_module is
    not emitted.  However, with Intel ifort the nameless DW_TAG_module is
    present and has the following form:

     ...
      <1><dd>: Abbrev Number: 7 (DW_TAG_module)
         <de>   DW_AT_decl_line   : 46
         <df>   DW_AT_decl_file   : 1
         <e0>   DW_AT_description : (indirect string, offset: 0x110): block
     data
         <e4>   DW_AT_high_pc     : 0x402bb7
         <ec>   DW_AT_low_pc      : 0x402bb7
     ...

    The missing name leads to a crash in add_partial_symbol, during length
    calculation.

    gdb/ChangeLog:
    2019-06-11  Bernhard Heckel  <bernhard.heckel@intel.com>

            * dwarf2read.c (add_partial_symbol): Skip nameless modules.

    gdb/testsuite/Changelog:
    2019-06-11  Bernhard Heckel  <bernhard.heckel@intel.com>

            * gdb.fortran/block-data.f: New.
            * gdb.fortran/block-data.exp: New.

diff --git a/gdb/dwarf2read.c b/gdb/dwarf2read.c
--- a/gdb/dwarf2read.c
+++ b/gdb/dwarf2read.c
@@ -9033,11 +9033,15 @@ add_partial_symbol (struct partial_die_info *pdi, struct dwarf2_cu *cu)
 			   0, cu->language, objfile);
       break;
     case DW_TAG_module:
-      add_psymbol_to_list (actual_name, strlen (actual_name),
-			   built_actual_name != NULL,
-			   MODULE_DOMAIN, LOC_TYPEDEF, -1,
-			   psymbol_placement::GLOBAL,
-			   0, cu->language, objfile);
+      /* With Fortran 77 there might be a "BLOCK DATA" module
+         available without any name.  If so, we skip the module as it
+         doesn't bring any value.  */
+      if (actual_name != nullptr)
+	add_psymbol_to_list (actual_name, strlen (actual_name),
+			     built_actual_name != NULL,
+			     MODULE_DOMAIN, LOC_TYPEDEF, -1,
+			     psymbol_placement::GLOBAL,
+			     0, cu->language, objfile);
       break;
     case DW_TAG_class_type:
     case DW_TAG_interface_type:
@@ -16972,9 +16976,6 @@ read_module_type (struct die_info *die, struct dwarf2_cu *cu)
   struct type *type;
 
   module_name = dwarf2_name (die, cu);
-  if (!module_name)
-    complaint (_("DW_TAG_module has no name, offset %s"),
-               sect_offset_str (die->sect_off));
   type = init_type (objfile, TYPE_CODE_MODULE, 0, module_name);
 
   return set_die_type (die, type, cu);
diff --git a/gdb/testsuite/gdb.fortran/block-data.exp b/gdb/testsuite/gdb.fortran/block-data.exp
new file mode 100644
--- /dev/null
+++ b/gdb/testsuite/gdb.fortran/block-data.exp
@@ -0,0 +1,63 @@
+# Copyright 2016-2019 Free Software Foundation, Inc.
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+# Test anonymous block-data statements.
+
+# A name for BLOCK DATA in Fortran is optional.  BLOCK DATA is used
+# for one-time initialization of non-pointer variables in named common
+# blocks.  GDB used to crash with 'Intel ifort'-generated code, which
+# outputs nameless DW_TAG_module, unlike with gfortran which just
+# doesn't emit DW_TAG_module in this case.
+
+if { [skip_fortran_tests] } { return -1 }
+
+standard_testfile .f
+load_lib "fortran.exp"
+
+if {[prepare_for_testing $testfile.exp $testfile $srcfile {debug f90}]} {
+    return -1
+}
+
+if ![runto MAIN__] then {
+    untested "couldn't run to breakpoint MAIN__"
+    return -1
+}
+
+with_test_prefix "default values" {
+    gdb_test "print doub1" "= 1\.11\\d+"
+    gdb_test "print doub2" "= 2\.22\\d+"
+    gdb_test "print char1" "= 'abcdef'"
+    gdb_test "print char2" "= 'ghijkl'"
+}
+
+gdb_breakpoint [gdb_get_line_number "! BP_BEFORE_SUB"]
+gdb_continue_to_breakpoint "! BP_BEFORE_SUB" ".*! BP_BEFORE_SUB.*"
+
+with_test_prefix "before sub" {
+    gdb_test "print doub1" "= 11\.11\\d+"
+    gdb_test "print doub2" "= 22\.22\\d+"
+    gdb_test "print char1" "= 'ABCDEF'"
+    gdb_test "print char2" "= 'GHIJKL'"
+}
+
+gdb_breakpoint [gdb_get_line_number "! BP_SUB"]
+gdb_continue_to_breakpoint "! BP_SUB" ".*! BP_SUB.*"
+
+with_test_prefix "in sub" {
+    gdb_test "print doub1" "= 11\.11\\d+"
+    gdb_test "print doub2" "= 22\.22\\d+"
+    gdb_test "print char1" "= 'ABCDEF'"
+    gdb_test "print char2" "= 'GHIJKL'"
+}
diff --git a/gdb/testsuite/gdb.fortran/block-data.f b/gdb/testsuite/gdb.fortran/block-data.f
new file mode 100644
--- /dev/null
+++ b/gdb/testsuite/gdb.fortran/block-data.f
@@ -0,0 +1,56 @@
+! Copyright 2016-2019 Free Software Foundation, Inc.
+!
+! This program is free software; you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation; either version 3 of the License, or
+! (at your option) any later version.
+!
+! This program is distributed in the hope that it will be useful,
+! but WITHOUT ANY WARRANTY; without even the implied warranty of
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+! GNU General Public License for more details.
+!
+! You should have received a copy of the GNU General Public License
+! along with this program.  If not, see <http://www.gnu.org/licenses/>.
+!
+! Check that GDB can handle block data with no global name.
+!
+! MAIN
+        PROGRAM bdata
+        DOUBLE PRECISION doub1, doub2
+        CHARACTER*6 char1, char2
+
+        COMMON /BLK1/ doub1, char1
+        COMMON /BLK2/ doub2, char2
+
+        doub1 = 11.111
+        doub2 = 22.222
+        char1 = 'ABCDEF'
+        char2 = 'GHIJKL'
+        CALL sub_block_data      ! BP_BEFORE_SUB
+        STOP
+        END
+
+! BLOCK DATA
+        BLOCK DATA
+
+        DOUBLE PRECISION doub1, doub2
+        CHARACTER*6 char1, char2
+
+        COMMON /BLK1/ doub1, char1
+        COMMON /BLK2/ doub2, char2
+        DATA doub1, doub2 /1.111, 2.222/
+        DATA char1, char2 /'abcdef', 'ghijkl'/
+        END
+
+! SUBROUTINE
+        SUBROUTINE sub_block_data
+
+        DOUBLE PRECISION doub1, doub2
+        CHARACTER*6 char1, char2
+
+        COMMON /BLK1/ doub1, char1
+        COMMON /BLK2/ doub2, char2
+
+        char1 = char2;    ! BP_SUB
+        END
